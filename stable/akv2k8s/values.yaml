# Default values 

# Will create CRD's
crds:
  enabled: true
  create: true
  keep: true

rbac:
  # Specifies whether RBAC resources should be created
  create: true
  podSecurityPolicies:
    {}

commonLabels: []

controller:
  enabled: true
  name: controller
  image:
    repository: spvest/azure-keyvault-controller
    tag: 1.1.0-beta.44
    pullPolicy: IfNotPresent
    #pullSecret: secretName

  keyVault:
    # Set to true to use custom auth - see https://akv2k8s.io/security/authentication/#custom-authentication-for-the-controller
    polling:
      normalInterval: 1m
      failureInterval: 10m
      failureAttempts: 5

  logLevel: info
  cloudConfig: /etc/kubernetes/azure.json

  customAuth:
    enabled: false

      # Uncomment to use aad-pod-identity (MSI) and point to a selector
      # podIdentitySelector: azure-key-vault

  # Uncomment to use client-id / secret - see https://akv2k8s.io/security/authentication/#custom-authentication-options
  # env:
  #   AZURE_TENANT_ID: <tenantId>
  #   AZURE_CLIENT_ID: <clientId>
  #   AZURE_CLIENT_SECRET: <clientSecret>
  
  # replicaCount: 1

  serviceAccount:
    create: true
    ## The name of the ServiceAccount to use.
    ## If not set and create is true, a name is generated using the fullname template
    name:

  env: []
  labels: []
  podLabels: []

  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

env_injector:
  enabled: true
  name: env-injector

  replicaCount: 2

  image:
    repository: spvest/azure-keyvault-webhook
    tag: 1.1.0-beta.44
    pullPolicy: IfNotPresent

  envImage:
    repository: spvest/azure-keyvault-env
    tag: 1.1.0-beta.44

  cloudConfigHostPath: /etc/kubernetes/azure.json

  keyVault:
    # Set to true to use custom auth - see https://github.com/SparebankenVest/azure-key-vault-to-kubernetes/blob/master/README.md#authentication
    customAuth: false

    authService:
      enabled: true
      caBundleController:
        image:
          repository: spvest/ca-bundle-controller
          tag: 1.1.0-beta.44
          pullPolicy: IfNotPresent
        logLevel: Info
        akvLabelName: azure-key-vault-env-injection
        configMapName: akv2k8s-ca

  env: []
  labels: []
  podLabels: []

  service:
    name: azure-keyvault-secrets-webhook
    type: ClusterIP
    externalTlsPort: 443
    internalTlsPort: 443
    externalHttpPort: 80
    internalHttpPort: 80

  metrics:
    enabled: false

  webhook:
    logLevel: Info
    dockerImageInspectionTimeout: 20 # will timeout after 20 seconds 

    # What will happen if the webhook fails? Ignore (continue) or Fail (prevent Pod from starting)?
    failurePolicy: Ignore

    # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#matching-requests-namespaceselector
    namespaceSelector:
      matchLabels:
        azure-key-vault-env-injection: enabled # The webhook will only trigger i namespaces with this label

      # Prevent env injection for pods in kube-system as recomended: https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#avoiding-operating-on-the-kube-system-namespace
      matchExpressions:
      - key: name
        operator: NotIn
        values:
        - kube-system

  ## See `kubectl explain poddisruptionbudget.spec` for more
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
  #  maxUnavailable: 1

  serviceAccount:
    create: true
    ## The name of the ServiceAccount to use.
    ## If not set and create is true, a name is generated using the fullname template
    name:

  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}